在 4.x 版本的 Netty 中，网络连接和 EventLoop 是稳定的多对 1 关系，
而 EventLoop 和 Java 线程是 1 对 1 关系，
这里的稳定指的是关系一旦确定就不再发生变化。
也就是说一个网络连接只会对应唯一的一个 EventLoop，而一个 EventLoop 也只会对应到一个 Java 线程，
所以一个网络连接只会对应到一个 Java 线程。

Netty 中还有一个核心概念是 EventLoopGroup，顾名思义，
一个 EventLoopGroup 由一组 EventLoop 组成。
实际使用中，一般都会创建两个 EventLoopGroup，
一个称为 bossGroup，一个称为 g。为什么会有两个 EventLoopGroup 呢？
这个和 socket 处理网络请求的机制有关，socket 处理 TCP 网络连接请求，
是在一个独立的 socket 中，每当有一个 TCP 连接成功建立，
都会创建一个新的 socket，之后对 TCP 连接的读写都是由新创建处理的 socket 完成的。
也就是说处理 TCP 连接请求和读写请求是通过两个不同的 socket 完成的。
上面我们在讨论网络请求的时候，为了简化模型，只是讨论了读写请求，而没有讨论连接请求。
在 Netty 中，bossGroup 就用来处理连接请求的，
而 workerGroup 是用来处理读写请求的。
bossGroup 处理完连接请求后，会将这个连接提交给 workerGroup 来处理，
 workerGroup 里面有多个 EventLoop，那新的连接会交给哪个 EventLoop 来处理呢？
这就需要一个负载均衡算法，Netty 中目前使用的是轮询算法

单个的线程可以监听多个数据通道
Data is always read from a channel into a buffer,
or written from a buffer to a channel.