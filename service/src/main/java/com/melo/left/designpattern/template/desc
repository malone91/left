模板模式主要是用来解决复用和扩展两个问题。
我们今天会结合 Java Servlet、JUnit TestCase、Java InputStream、Java AbstractList
四个例子来具体讲解这两个作用。

模板模式作用一：复用
模板模式把一个算法中不变的流程抽象到父类的模板方法 templateMethod() 中，
将可变的部分 method1()、method2() 留给子类 ContreteClass1 和 ContreteClass2 来实现。

Java IO 类库中，有很多类的设计用到了模板模式，比如 InputStream、OutputStream、Reader、Writer。

在 Java AbstractList 类中，addAll() 函数可以看作模板方法，add() 是子类需要重写的方法，
尽管没有声明为 abstract 的，但函数实现直接抛出了 UnsupportedOperationException 异常。

public boolean addAll(int index, Collection<? extends E> c) {
    rangeCheckForAdd(index);
    boolean modified = false;
    for (E e : c) {
        add(index++, e);
        modified = true;
    }
    return modified;
}

public void add(int index, E element) {
    throw new UnsupportedOperationException();
}
模板模式作用二：扩展
扩展，并不是指代码的扩展性，而是指框架的扩展性，有点类似我们之前讲到的控制反转，
基于这个作用，模板模式常用在框架的开发中，让框架用户可以在不修改框架源码的情况下，
定制化框架的功能。我们通过 Junit TestCase、Java Servlet


public class HelloServlet extends HttpServlet {
  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    this.doPost(req, resp);
  }

  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    resp.getWriter().write("Hello World.");
  }
}
Servlet 容器会接收到相应的请求，并且根据 URL 和 Servlet 之间的映射关系，
找到相应的 Servlet（HelloServlet），然后执行它的 service() 方法。service() 方法定义在父类 HttpServlet 中，
它会调用 doGet() 或 doPost() 方法，然后输出数据（“Hello world”）到网页。

HttpServlet 的 service() 方法就是一个模板方法，它实现了整个 HTTP 请求的执行流程，
doGet()、doPost() 是模板中可以由子类来定制的部分。
实际上，这就相当于 Servlet 框架提供了一个扩展点（doGet()、doPost() 方法），
让框架用户在不用修改 Servlet 框架源码的情况下，将业务代码通过扩展点镶嵌到框架中执行。

跟 Java Servlet 类似，JUnit 框架也通过模板模式提供了一些功能扩展点
（setUp()、tearDown() 等），让框架用户可以在这些扩展点上扩展功能。

在使用 JUnit 测试框架来编写单元测试的时候，我们编写的测试类都要继承框架提供的 TestCase 类。
在 TestCase 类中，runBare() 函数是模板方法，它定义了执行测试用例的整体流程：先执行 setUp() 做些准备工作，
然后执行 runTest() 运行真正的测试代码，最后执行 tearDown() 做扫尾工作。


public abstract class TestCase extends Assert implements Test {
  public void runBare() throws Throwable {
    Throwable exception = null;
    setUp();
    try {
      runTest();
    } catch (Throwable running) {
      exception = running;
    } finally {
      try {
        tearDown();
      } catch (Throwable tearingDown) {
        if (exception == null) exception = tearingDown;
      }
    }
    if (exception != null) throw exception;
  }

  /**
  * Sets up the fixture, for example, open a network connection.
  * This method is called before a test is executed.
  */
  protected void setUp() throws Exception {
  }

  /**
  * Tears down the fixture, for example, close a network connection.
  * This method is called after a test is executed.
  */
  protected void tearDown() throws Exception {
  }
}

InstantiationAwareBeanPostProcessorAdapter
问题：太多抽象方法怎么办？写个适配器，让子类去继承

与模板相同作用的技术概念：回调
A 类如何将回调函数传递给 B 类呢？不同的编程语言，有不同的实现方法。
C 语言可以使用函数指针，Java 则需要使用包裹了回调函数的类对象，我们简称为回调对象。

public interface ICallback {
  void methodToCallback();
}

// 可以看做框架代码
public class BClass {
  public void process(ICallback callback) {
    //...
    callback.methodToCallback();
    //...
  }
}

public class AClass {
  public static void main(String[] args) {
    BClass b = new BClass();
    // A 类如何将回调函数传递给 B 类呢？
    b.process(new ICallback() { //回调对象
      @Override
      public void methodToCallback() {
        System.out.println("Call back me.");
      }
    });
  }
}

回调跟模板模式一样，也具有复用和扩展的功能。除了回调函数之外，BClass 类的 process()
函数中的逻辑都可以复用。如果 ICallback、BClass 类是框架代码，AClass 是使用框架的客户端代码，
我们可以通过 ICallback 定制 process() 函数，也就是说，框架因此具有了扩展的能力。

通过三方支付系统来实现支付功能，用户在发起支付请求之后，一般不会一直阻塞到支付结果返回，
而是注册回调接口（类似回调函数，
一般是一个回调用的 URL）给三方支付系统，等三方支付系统执行完成之后，将结果通过回调接口返回给用户。


上面的代码实际上是同步回调的实现方式，在 process() 函数返回之前，
执行完回调函数 methodToCallback()。而上面支付的例子是异步回调的实现方式，
发起支付之后不需要等待回调接口被调用就直接返回。
从应用场景上来看，同步回调看起来更像模板模式，异步回调看起来更像观察者模式。

Spring 提供了很多 Template 类，比如，JdbcTemplate、RedisTemplate、RestTemplate。
尽管都叫作 xxxTemplate，但它们并非基于模板模式来实现的，而是基于回调来实现的，确切地说应该是同步回调。
而同步回调从应用场景上很像模板模式，
所以，在命名上，这些类使用 Template（模板）这个单词作为后缀。

queryUser() 函数包含很多流程性质的代码，跟业务无关，比如，加载驱动、创建数据库连接、
创建 statement、关闭连接、关闭 statement、处理异常。针对不同的 SQL 执行请求，
这些流程性质的代码是相同的、可以复用的，我们不需要每次都重新敲一遍。


JdbcTemplate 通过回调的机制，将不变的执行流程抽离出来，放到模板方法 execute() 中，
将可变的部分设计成回调 StatementCallback，
由用户来定制。query() 函数是对 execute() 函数的二次封装，让接口用起来更加方便。


@Override
public <T> List<T> query(String sql, RowMapper<T> rowMapper) throws DataAccessException {
 return query(sql, new RowMapperResultSetExtractor<T>(rowMapper));
}

@Override
public <T> T query(final String sql, final ResultSetExtractor<T> rse) throws DataAccessException {
 Assert.notNull(sql, "SQL must not be null");
 Assert.notNull(rse, "ResultSetExtractor must not be null");
 if (logger.isDebugEnabled()) {
  logger.debug("Executing SQL query [" + sql + "]");
 }

 class QueryStatementCallback implements StatementCallback<T>, SqlProvider {
  @Override
  public T doInStatement(Statement stmt) throws SQLException {
   ResultSet rs = null;
   try {
    rs = stmt.executeQuery(sql);
    ResultSet rsToUse = rs;
    if (nativeJdbcExtractor != null) {
     rsToUse = nativeJdbcExtractor.getNativeResultSet(rs);
    }
    return rse.extractData(rsToUse);
   }
   finally {
    JdbcUtils.closeResultSet(rs);
   }
  }
  @Override
  public String getSql() {
   return sql;
  }
 }

 return execute(new QueryStatementCallback());
}

@Override
public <T> T execute(StatementCallback<T> action) throws DataAccessException {
 Assert.notNull(action, "Callback object must not be null");

 Connection con = DataSourceUtils.getConnection(getDataSource());
 Statement stmt = null;
 try {
  Connection conToUse = con;
  if (this.nativeJdbcExtractor != null &&
    this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativeStatements()) {
   conToUse = this.nativeJdbcExtractor.getNativeConnection(con);
  }
  stmt = conToUse.createStatement();
  applyStatementSettings(stmt);
  Statement stmtToUse = stmt;
  if (this.nativeJdbcExtractor != null) {
   stmtToUse = this.nativeJdbcExtractor.getNativeStatement(stmt);
  }
  T result = action.doInStatement(stmtToUse);
  handleWarnings(stmt);
  return result;
 }
 catch (SQLException ex) {
  // Release Connection early, to avoid potential connection pool deadlock
  // in the case when the exception translator hasn't been initialized yet.
  JdbcUtils.closeStatement(stmt);
  stmt = null;
  DataSourceUtils.releaseConnection(con, getDataSource());
  con = null;
  throw getExceptionTranslator().translate("StatementCallback", getSql(action), ex);
 }
 finally {
  JdbcUtils.closeStatement(stmt);
  DataSourceUtils.releaseConnection(con, getDataSource());
 }
}


Button button = (Button)findViewById(R.id.button);
button.setOnClickListener(new OnClickListener() {
  @Override
  public void onClick(View v) {
    System.out.println("I am clicked.");
  }
});

Hook 比较经典的应用场景是 Tomcat 和 JVM 的 shutdown hook。接下来，
我们拿 JVM 来举例说明一下。JVM 提供了 Runtime.addShutdownHook(Thread hook) 方法，
可以注册一个 JVM 关闭的 Hook。
当应用程序关闭的时候，JVM 会自动调用 Hook 代码。代码示例如下所示：

public class ShutdownHookDemo {

  private static class ShutdownHook extends Thread {
    public void run() {
      System.out.println("I am called during shutting down.");
    }
  }

  public static void main(String[] args) {
    Runtime.getRuntime().addShutdownHook(new ShutdownHook());
  }

}

public class Runtime {
  public void addShutdownHook(Thread hook) {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
      sm.checkPermission(new RuntimePermission("shutdownHooks"));
    }
    ApplicationShutdownHooks.add(hook);
  }
}

class ApplicationShutdownHooks {
    /* The set of registered hooks */
    private static IdentityHashMap<Thread, Thread> hooks;
    static {
            hooks = new IdentityHashMap<>();
        } catch (IllegalStateException e) {
            hooks = null;
        }
    }

    static synchronized void add(Thread hook) {
        if(hooks == null)
            throw new IllegalStateException("Shutdown in progress");

        if (hook.isAlive())
            throw new IllegalArgumentException("Hook already running");

        if (hooks.containsKey(hook))
            throw new IllegalArgumentException("Hook previously registered");

        hooks.put(hook, hook);
    }

    static void runHooks() {
        Collection<Thread> threads;
        synchronized(ApplicationShutdownHooks.class) {
            threads = hooks.keySet();
            hooks = null;
        }

        for (Thread hook : threads) {
            hook.start();
        }
        for (Thread hook : threads) {
            while (true) {
                try {
                    hook.join();
                    break;
                } catch (InterruptedException ignored) {
                }
            }
        }
    }
}

当应用程序关闭的时候，JVM 会调用这个类的 runHooks() 方法，创建多个线程，并发地执行多个 Hook。
我们在注册完 Hook 之后，并不需要等待 Hook 执行完成，所以，这也算是一种异步回调。
