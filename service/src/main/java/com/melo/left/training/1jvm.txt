GC 垃圾回收  内存管理器
静态类型 编译执行 面向对象
编译好的字节码是跨平台，二进制的跨平台，作为一个统一的文件分发到不同系统
C++却不行，它是源代码跨平台
Java的兼容性比较好

编程语言有两种，一种是被人骂的，一种是没人用的。

字节码的作用：研究代码细节，找到写法不同的根本原因 相当于汇编语言
字节码由单字节byte的指令组成，理论上最多支持256个操作码，opcode，实际上只使用了200左右。

根据指令的性质，分为四大类
栈操作，包括与局部变量交互的指令
程序流控制，跳转，if，for循环
对象操作，包括方法调用指令
算数运算、类型抓换

生成字节码 main方法中new一个当前类
$ javap -c HelloByteCode.class
Compiled from "HelloByteCode.java"
public class com.melo.left.training.java.HelloByteCode {
  public com.melo.left.training.java.HelloByteCode();
    Code:
       0: aload_0                     助记符，相当于字节码的操作码      a：引用
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V 调用方法Object的初始化方法
       4: return

  public static void main(java.lang.String[]);
    Code:
       0: new           #2                  // class com/melo/left/training/java/HelloByteCode
       3: dup 复制栈 dump
       4: invokespecial #3                  // Method "<init>":()V
       7: astore_1
       8: return
}

aload astore
JVM中都是基于栈的操作，还有个本地变量表，所有的计算都是在栈上，变量的名字和值在本地变量表，怎么计算呢？
在运行的时候，把变量挪到栈上，运行完后把栈上的值store回本地变量表，需要load store基本操作
                LOAD->
LOCAL VARIABLE           STACK
                <-STORE


$ javap -c -verbose HelloByteCode.class
Classfile /E:/code/left/service/target/classes/com/melo/left/training/java/Hello                                                                                  ByteCode.class
  Last modified 2021-11-29; size 474 bytes
  MD5 checksum 1e202864c36154ebc6a96d019aebd519
  Compiled from "HelloByteCode.java"
public class com.melo.left.training.java.HelloByteCode
  minor version: 0
  major version: 52  //JVM版本号
  flags: ACC_PUBLIC, ACC_SUPER //类是public or其他
Constant pool: //常量池 引用到所有的变量 在操作栈上都是一个数字
   #1 = Methodref          #4.#19         // java/lang/Object."<init>":()V
   #2 = Class              #20            // com/melo/left/training/java/HelloBy                                                                                  teCode
   #3 = Methodref          #2.#19         // com/melo/left/training/java/HelloBy                                                                                  teCode."<init>":()V
   #4 = Class              #21            // java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Utf8               Code
   #8 = Utf8               LineNumberTable
   #9 = Utf8               LocalVariableTable
  #10 = Utf8               this
  #11 = Utf8               Lcom/melo/left/training/java/HelloByteCode;
  #12 = Utf8               main
  #13 = Utf8               ([Ljava/lang/String;)V
  #14 = Utf8               args
  #15 = Utf8               [Ljava/lang/String;
  #16 = Utf8               object
  #17 = Utf8               SourceFile
  #18 = Utf8               HelloByteCode.java
  #19 = NameAndType        #5:#6          // "<init>":()V
  #20 = Utf8               com/melo/left/training/java/HelloByteCode
  #21 = Utf8               java/lang/Object
{
  public com.melo.left.training.java.HelloByteCode();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>                                                                                  ":()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcom/melo/left/training/java/HelloByteCode;

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1          //创建深度为几栈深度 本地变量表长度多少，几个槽位 一切都可控
         0: new           #2                  // class com/melo/left/training/ja                                                                                  va/HelloByteCode
         3: dup
         4: invokespecial #3                  // Method "<init>":()V
         7: astore_1
         8: return
      LineNumberTable:
        line 5: 0
        line 6: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  args   [Ljava/lang/String;
            8       1     1 object   Lcom/melo/left/training/java/HelloByteCode;
}
SourceFile: "HelloByteCode.java"

当定义一个布尔类型的变量，字节码实际上是当做int类型处理的，32位是字节码处理的最小单位
int32 long64 原子性问题  64位操作系统都是原子性操作，32位系统不是

a+b 两种不同类型 在编译时字节码已经做好了相关的转换指令，jvm执行很快

方法调用的指令
invokestatic 调用某类的静态方法，最快的调用指令
invokespecial 调用构造函数，也可同一个类的private方法，可见的超类方法
invokevirtual 具体类型目标对象，调用公共、受保护和package级的私有方法 ，被子类覆盖的父类方法，实际调用的是子类的方法这就是虚方法 只要有子类覆盖
invokeinterface 接口引用调用方法时
invokedynamic JDK新加，实现动态类型语言支持，JDK8以后支持lambda实现基础

不同的classloader可以做版本化，模块化。两个兄弟没有任何的双亲关系，基于这个可以把不同的jar包隔离掉
同样的代码用两个classloader加载，代码加接口升级了，用B loader加载，代码有了两个不同版本的类，这是
JDK9之前会出现的自定义类加载器

扩展类和应用类可见,启动类是c++实现的看不到

堆上没有计算能力，只有栈有计算能力。
每个线程的局部变量副本是独立的

每启动一个线程，JVM就会在栈空间 分配 对应的线程栈 如1MB空间Xss

线程栈也就Java方法栈，如果使用了JNI方法，会分配一个单独的本地方法栈 Native Stack

线程执行过程中，会有多个方法组成调用栈，StackTrace 比如A调用B，B调用C... 每执行到一个方法就会创建对应的栈帧 Frame

栈帧包含返回值 局部变量表 操作数栈 CLassMethod指针，可以看做一个小的虚拟机
线程栈下有多个栈帧
JVM栈下有多个线程栈
JVM进程下包含 栈 堆 非堆 JVM自身，  堆最大-Xmx1G，一般为物理内存的70%以下

堆外内存可以用到跟堆一样的内存

调用JNI方法时会产生方法栈，内存不在JVM的管理方位之内，也是在堆外内存

栈帧是一个逻辑上的概念，具体的大小在一个方法编写完成后基本就能确定。

jps -lmv
               1s打一次  执行1000次
jstat -gc pid 1000 1000
jstat -gcutil pid 1000 1000 更简洁，每秒显示各个区大小，回收时间

ps -ef | grep java

jmap -heap pid  简单的堆配置

jmap -histo pid 占用排名
instances 实例 占用字节 className   [B [I [L类
[C is a char[]  和字符串相关
[S is a short[]
[I is a int[]
[B is a byte[]
[[I is a int[][]

jmap -histo pid > a.txt
vim a.txt

输入 gg 命令，光标会移动到文档开头 ；
输入 G 命令，光标会移动到文档末尾；

jstack -l pid
将线程相关的locks信息一起输出，比如持有的锁，等待 的锁
parking to wait for <>
kill -3 pid

kill -3 PID命令只能打印那一瞬间java进程的堆栈信息，适合在服务器响应慢，cpu、内存快速飙升等异常情况下使用，
可以方便地定位到导致异常发生的java类，解决如死锁、连接超时等原因导致的系统异常问题。该命令不会杀死进程。

jcmd pid help
jcmd pid VM.version
jcmd pid VM.flags
jcmd pid VM.info  记录了最近发生的GC的情况 GC Heap History (20 Events)
jcmd pid GC.heap_info

jrunscript -e "cat("http://www.baidu.com")"

堆 默认的配置是什么

jconsole
堆内存一直上升不下降，有问题

jvisualvm
Visual GC
jmc

引用计数 循环依赖的对象，永远不会为0，最终导致内存溢出
一旦为0，就不会变为1了
所以引出了 引用跟踪， 不去标记所有的对象了，对象生存时间短，从根对象出发扫描遍历标记，没有标记的就是死对象
循环的问题也解决了，不用扫描那么多的对象

标记清除上百万个对象，STW

堆包括新生代和老年代，新生代Young包括Eden，S1,S1，默认比例8:1:1.

标记阶段Eden区存活的对象就会复制到存活区，为什么不是移动呢？ 新生代大部分对象都是要被回收的
整理老年代空间内容，将所有存活的对象复制，从老年代开始的地方依次存放，因为老年代小部分是被回收，大部分是存活的

8之后Meta在非堆

根对象：当前正在执行的方法里的局部变量和输入参数
活动线程
所有类的静态字段
JNI引用

年轻代和老年代GC分开，根对象各自是各自的GC ROOTS
对象从新生到老年，有些引用关系还在新生代，老年代引用到了新生代，需要单独的集合记录跨代的引用关系GC ROOTS即Rset RememberSet
在处理新生代 就是Rset + 新生代GC ROOTS

暂停时间与堆大小，对象总数没直接关系，而是由存活对象的数量决定，存活的数量少，STW短 增加堆内存大小不会直接影响标记阶段占用的时间

Young GC非常快 存活对象少 STW短暂

标记清除
内存会有碎片

标记复制  ：年轻代存货的少，用这个比较好
占用空间

标记 清除 整理 ： 老年代用比较好 移动节省内存
多了整理，大范围挪动对象，慢


S1 S0的数据不会放到Eden

敲黑板，各种GC

演示
java -jar -XX:+UseParallelGC -XX:+UseParallelOldGC  .\service-1.0-SNAPSHOT.jar
-XX:+UseParallelGC
-XX:+UseParallelOldGC
jmap -heap pid
jps -l
jps
新生代并行
并发

并行GC Parallel GC最常用的调整是并行的GC的线程数 ParallelGCThreads，默认为CPU核数
效率比较高，整体处理GC的时间总的比较少 保障CPU资源，系统吞吐量比较高
新生代并行STW方式的标记-复制法，老年代使用标记-清除-整理法

CMS 老年代使用并发标记-清除算法，新生代并行STW方式的标记-复制法
对老年代的处理比较简单，不对老年代进行整理，使用空闲列表管理内存空间的回收，避免了长时间的卡顿，
标记-清除阶段的大部分工作和应用线程一起并发执行，这些阶段并没有明显的应用线程暂停，和应用线程争抢CPU时间
CMS并发线程数=CPU核心数的1/4
如果是多和CPU，主要调优目标是降低GC停顿导致的系统延迟，使用CMS是个很明智的选择
特点是每次暂停时间短

ZGC只有在Linux的某些版本上才有
JDK15才有Windows和Mac版本
CMS Young区变小了，Old变大了？ 02:52:10
MaxNewSize

CMS是试验性的GC，G1在其基础上改造
jdk9以后，默认G1，CMS过时
G1 gc主要的设计目标是将STW的时间和分布设计为可预期和配置的
G1是实时垃圾收集器，可以为其设置某项特定的性能指标，比如老年代的回收时间设置

-XX:+UseG1GC -XX:MaxGCPauseMillis=50  默认200
期望做到平均GC暂停的时间在50毫秒，定目标 你可以增加评率什么的

堆不再分为年轻代和老年代，划分为2048个可以存放对象的小块堆区域small heap region
每个小块，可能一会被定义为Eden，一会被指定为Survivor或者Old区
逻辑上，Eden和Survivor合起来就是年轻代，所有的 Old区拼在一起是老年代
需要老年代那就多分配些，需要年轻就多些年轻
这样划分后，是的G1不必每次都去收集整理堆空间，而是以增量的方式来进行处理，每次只处理一部分内存块，
称为此次GC的回收集collection set。每次GC暂停都会收集所有年轻代的内存块，但一般只包含部分老年代的内存块
一个创新是：并发阶段估算每个小堆块存活对象的总数，构建回收集的原则：垃圾最多的小块会被优先收集，这也是G1名称的由来。
优先处理垃圾比较多的小块

JDK8 G1比较稳定，尽量用，能做到吞吐量和暂停时间的平衡，在工程上看，处于并行GC和CMS中间的GC
并行GC每次暂停的时间比较长，整体的话消耗最少很专注，
CMS搞得很复杂，每次暂停的时间很短，但效率不高，暂停时间不可控
但G1执行的前一段时间不可控，因为之前么有数据，一开始比较长，50---却100 200
他米有统计数据，需要工作一段时间预热以后，有了足够的统计数据以后，就可以调整自己的行为和策略，然后知道自己大概在什么频率下，
去做触发GC，来达到自己承诺的50毫秒暂停时间

垃圾回收什么时候触发：
G1以前的垃圾回收期触发 的条件是某个区满了，大对象没地方放了，
CMS设置一个阈值触发GC，比如默认的话是45%
对于G1和后面更高级的，这个参数就没有意义了，JVM里的GC会根据前面执行百万次的调用GC，统计数据，不断调整自己触发的
行为和条件，条件是变化的，是智能的，启发式GC
根据历史优化自动做这些，这是整个GC发展的脉络

-XX：+UseG1GC：启用 G1 GC；
-XX：G1NewSizePercent：初始年轻代占整个 Java Heap 的大小，默认值为 5%；
-XX：G1MaxNewSizePercent：最大年轻代占整个 Java Heap 的大小，默认值为 60%；
-XX：G1HeapRegionSize：设置每个 Region 的大小，单位 MB，需要为 1，2，4，8，16，32 中的某个值，默
认是堆内存的 1/2000。如果这个值设置比较大，那么大对象就可以进入 Region 了。
-XX：ConcGCThreads：与 Java 应用一起执行的 GC 线程数量，默认是 Java 线程的 1/4，减少这个参数的数值可
能会提升并行回收的效率，提高系统内部吞吐量。如果这个数值过低，参与回收垃圾的线程不足，也会导致并行回
收机制耗时加长。
-XX：+InitiatingHeapOccupancyPercent（简称 IHOP）：G1 内部并行回收循环启动的阈值，默认为 Java Heap
的 45%。这个可以理解为老年代使用大于等于 45% 的时候，JVM 会启动垃圾回收。这个值非常重要，它决定了在
什么时间启动老年代的并行回收。
-XX：G1HeapWastePercent：G1停止回收的最小内存大小，默认是堆大小的 5%。GC 会收集所有的 Region 中
的对象，但是如果下降到了 5%，就会停下来不再收集了。就是说，不必每次回收就把所有的垃圾都处理完，可以
遗留少量的下次处理，这样也降低了单次消耗的时间。
-XX：G1MixedGCCountTarget：设置并行循环之后需要有多少个混合 GC 启动，默认值是 8 个。老年代 Regions
的回收时间通常比年轻代的收集时间要长一些。所以如果混合收集器比较多，可以允许 G1 延长老年代的收集时间。

-XX：+G1PrintRegionLivenessInfo：这个参数需要和 -XX:+UnlockDiagnosticVMOptions 配合启动，打印 JVM 的调试信
息，每个 Region 里的对象存活信息。
-XX：G1ReservePercent：G1 为了保留一些空间用于年代之间的提升，默认值是堆空间的 10%。因为大量执行回收的地方在
年轻代（存活时间较短），所以如果你的应用里面有比较大的堆内存空间、比较多的大对象存活，这里需要保留一些内存。
-XX：+G1SummarizeRSetStats：这也是一个 VM 的调试信息。如果启用，会在 VM 退出的时候打印出 Rsets 的详细总结信
息。如果启用 -XX:G1SummaryRSetStatsPeriod 参数，就会阶段性地打印 Rsets 信息。
-XX：+G1TraceConcRefinement：这个也是一个 VM 的调试信息，如果启用，并行回收阶段的日志就会被详细打印出来。
-XX：+GCTimeRatio：这个参数就是计算花在 Java 应用线程上和花在 GC 线程上的时间比率，默认是 9，跟新生代内存的分
配比例一致。这个参数主要的目的是让用户可以控制花在应用上的时间，G1 的计算公式是 100/（1+GCTimeRatio）。这样
如果参数设置为 9，则最多 10% 的时间会花在 GC 工作上面。Parallel GC 的默认值是 99，表示 1% 的时间被用在 GC 上面，
这是因为 Parallel GC 贯穿整个 GC，而 G1 则根据 Region 来进行划分，不需要全局性扫描整个内存堆。
-XX：+UseStringDeduplication：手动开启 Java String 对象的去重工作，这个是 JDK8u20 版本之后新增的参数，主要用于
相同 String 避免重复申请内存，节约 Region 的使用。
-XX：MaxGCPauseMills：预期 G1 每次执行 GC 操作的暂停时间，单位是毫秒，默认值是 200 毫秒，G1 会尽量保证控制在
这个范围内。

G1到了45%开始做老年代的GC

更动态 更智能 更富弹性

G1 145阶段需要暂停

G1之前常用的组合为：
（1）Serial+Serial Old 实现单线程的低延迟垃圾回收机制；
（2）ParNew+CMS，实现多线程的低延迟垃圾回收机制；
GC频率和次数比较高
（3）Parallel Scavenge和ParallelScavenge Old，实现多线程的高吞吐量垃圾
每次GC时间长，但是GC完全不影响业务，GC不执行的时间段内，业务占满所有的CPU线程的

怎么选择GC算法？
看系统吞吐量优先还是延迟优先
没什么压力的系统，流量不大的，每次几百毫秒，人对低延迟不敏感，比如购物，订酒店，电影票
JDK8 并行GC满足大部分场景
对延迟敏感，高频交易，5-10毫秒以内，G1 50毫秒的话会疯，CMS延迟还是高，最后上的用ZGC
堆内存比较大，用G1，把系统切片成小的内存区域，可控，虽然内存很大，传统GC，32G，一半老年代，FullGC肯定很慢，
但是G1 GC没那么大压力，除以两千多每个区域16M，很小；
再大了，G1 GC还是有压力，G1会退化为单线程，一般不发生，极端情况；
堆如果不大，几百M，用什么GC问题都不太大，现代CPU都很快

=========================================================================================
选择正确的 GC 算法，唯一可行的方式就是去尝试，一般性的指导原则：
1. 如果系统考虑吞吐优先，CPU 资源都用来最大程度处理业务，用 Parallel GC；
2. 如果系统考虑低延迟优先，每次 GC 时间尽量短，用 CMS GC；
3. 如果系统内存堆较大，同时希望整体来看平均 GC 时间可控，使用 G1 GC。
对于内存大小的考量：
1. 一般 4G 以上，算是比较大，用 G1 的性价比较高。
2. 一般超过 8G，比如 16G-64G 内存，非常推荐使用 G1 GC。
=========================================================================================

默认算法：
7 8 -XX:UseParallelGC 意味着使用Parallel Scavenge 新生代 + Parallel Old 老年代 的收集器组合进行内存回收
9 G1
10 G1
11 G1
12 G1

ZGC JDK11出的 只支持Linux，试验性功能 一开始支持4T的内存
-XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx16g
主要特点：
GC最大停顿时间不超过10ms 暂停时间可以精确控制在5ms以内  GC频率高 166次ZGC 444毫秒，
堆内存支持范围广，小到几百M，大到4TB的超大堆 JDK13-16TB
与G1相比，应用吞吐量下降不超过15%
JDK15 支持macOS和Windows

GC线程99.9%都是与应用线程并发的，改善停顿时间

GC 总结
到目前为止，我们一共了解了 Java 目前支持的所有 GC 算法，一共有 7 类:
1. 串行 GC（Serial GC）: 单线程执行，应用需要暂停；
2. 并行 GC（ParNew、Parallel Scavenge、Parallel Old）: 多线程并行地执行垃圾回收，关注与高吞吐；
3. CMS（Concurrent Mark-Sweep）: 多线程并发标记和清除，关注与降低延迟；
4. G1（G First）: 通过划分多个内存区域做增量整理和回收，进一步降低延迟；
5. ZGC（Z Garbage Collector）: 通过着色指针和读屏障，实现几乎全部的并发执行，几毫秒级别的延迟，线性可扩展；
6. Epsilon: 实验性的 GC，供性能分析使用；
7. Shenandoah: G1 的改进版本，跟 ZGC 类似。
GC 总结
可以看出 GC 算法和实现的演进路线:
1. 串行 -> 并行: 重复利用多核 CPU 的优势，大幅降低 GC 暂停时间，提升吞吐量。
2. 并行 -> 并发： 不只开多个 GC 线程并行回收，还将GC操作拆分为多个步骤，让很多繁重的任务和应用线程一起并
发执行，减少了单次 GC 暂停持续的时间，这能有效降低业务系统的延迟。
3. CMS -> G1： G1 可以说是在 CMS 基础上进行迭代和优化开发出来的，划分为多个小堆块进行增量回收，这样就更
进一步地降低了单次 GC 暂停的时间
4. G1 -> ZGC:：ZGC 号称无停顿垃圾收集器，这又是一次极大的改进。ZGC 和 G1 有一些相似的地方，但是底层的算法
和思想又有了全新的突破。
脱离场景谈性能都是耍流氓”。
目前绝大部分 Java 应用系统，堆内存并不大比如 2G-4G 以内，而且对 10ms 这种低延迟的 GC 暂停不敏感，也就是说处
理一个业务步骤，大概几百毫秒都是可以接受的，GC 暂停 100ms 还是 10ms 没多大区别。另一方面，系统的吞吐量反
而往往是我们追求的重点，这时候就需要考虑采用并行 GC。
如果堆内存再大一些，可以考虑 G1 GC。如果内存非常大（比如超过 16G，甚至是 64G、128G），或者是对延迟非常
敏感（比如高频量化交易系统），就需要考虑使用本节提到的新 GC（ZGC/Shenandoah）。

8是长期维护版本，下一个大概是18版本

G1没有碎片了

过早优化是万恶之源 回收的快，来得及，JVM就是跑的健康的

并行GC
1------------------------------------------------------
C:\Users\76009>jmap -heap 10424
Attaching to process ID 10424, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.171-b11

using thread-local object allocation.
Parallel GC with 4 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 2118123520 (2020.0MB)
   NewSize                  = 44564480 (42.5MB)
   MaxNewSize               = 705691648 (673.0MB)
   OldSize                  = 89653248 (85.5MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage:
PS Young Generation
Eden Space:
   capacity = 133693440 (127.5MB)
   used     = 106628392 (101.68875885009766MB)
   free     = 27065048 (25.811241149902344MB)
   79.75588929419423% used
From Space:
   capacity = 15204352 (14.5MB)
   used     = 0 (0.0MB)
   free     = 15204352 (14.5MB)
   0.0% used
To Space:
   capacity = 14680064 (14.0MB)
   used     = 0 (0.0MB)
   free     = 14680064 (14.0MB)
   0.0% used
PS Old Generation
   capacity = 132120576 (126.0MB)
   used     = 27235120 (25.973434448242188MB)
   free     = 104885456 (100.02656555175781MB)
   20.613836863684277% used

24502 interned Strings occupying 2386976 bytes.
-----------------------------------------------------
2------------------------------------------------------
使用CMS后
MaxNewSIze变小了，332.75M
64*4*13/10 332.8
为什么会有这个差别呢？
CMS里最大的Young区GC使用的内存是64位机器上是 64M乘以并行GC的线程数再乘以一个系数13/10

JVM管理两种内存，一个是堆，一个是非堆
堆就是Java代码可及的内存，是留给开发人员使用的；
非堆就是JVM留给 自己用的，所有方法区、JVM内部处理或优化所需的内存(如JIT编译后的代码缓存)、
每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法 的代码都在非堆内存中。
1、堆内存分配：
-Xms 256m
-Xmx 256m
JVM初始分配的内存由-Xms指定，默认是物理内存的1/64；
JVM最大分配的内存由-Xmx指 定，默认是物理内存的1/4。
默认空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制；
空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制。因此服务器一般设置-Xms、-Xmx相等以避免在每次GC 后调整堆的大小。
2、非堆内存分配：
-XX:PermSize 256m
-XX:MaxPermSize 256m
JVM使用-XX:PermSize设置非堆内存初始值，默认是物理内存的1/64；
由-XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4。

堆溢出：
java.lang.OutOfMemoryError:Java heap spcace
栈溢出：
java.lang.StackOverflowError
方法区溢出：
java.lang.OutOfMemoryError:PermGen space