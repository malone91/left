先把本质学号，内功打深厚，再来招式，方法论，很多原理对整个架构是有帮助的。
工程的方法论，设计理念  微服务
看了原理不一定get到这个点，因为你没有踩过这个坑，没有这个业务场景，没有人讲为什么，痛点才能get到点。

面向用户场景API而不是面向资源，客户端轻量，服务单重
协作模式 ：移动业务＋网关小组
API聚合器 composer
交通基本靠走，沟通基本靠吼
加层解决
Envoy Zuul
关注点分离 Separation of Concern
业务编排

业务闭环做微服务、对内聚合，缓存，订阅变更。高频访问放一个里边，最终为客户负责
解决用户问题就是一个微服务
反推到理论
canal订阅binlog
战术停顿

从业务出来做架构
代码即文档，文档即代码，IDL
PB
公网GPRC 内网GRPC

业务复杂，限流之类的在网关层做
基础功能在网关做 BFF业务比较重
网关是做横向切面的功能
网关不太容易挂 网关是无状态的 99%的微服务没有状态
网关是多节点  过载保护 限流都要做的

BFF只是做数据编排上的事情，无法做保证分布式一致性的东西，不会涉及将查询、修改的操作聚合
由下层去负责这些问题
比如订单系统

BFF依赖的其中一个服务挂了，如何做处理 容错性
方法论 先讲抽象，再讲细节
BFF依赖的其中一个服务挂了，如何做处理 容错性
核心的  返回500
BFF支持裸透传
比较简单的服务
配置 然后路由到
BFF之间不会相互调用
FAAS
聚合复杂的这种

工程化
头条2-2
经历过大量的事情 场景 没有场景怎么搞 大量思考并实践
深入浅出
微服务的书都是骗人的
听到不会的名词，赶紧索引起来，随后再慢慢研究，然后再反思 提问 实践 然后进步

官方文档要看过的
预热 然后进入学习
昨天

restfuf灵活但没有强约束
HTTP表达能力太弱了