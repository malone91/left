javac -encoding UTF-8 GCLogAnalysis.java
java -XX:+PrintGCDetails GCLogAnalysis

java  GCLogAnalysis
正在执行...
执行结束!共生成对象次数:7073

>java -XX:+PrintGCDetails GCLogAnalysis
正在执行...
[GC (Allocation Failure) [PSYoungGen: 33077K->5110K(38400K)] 33077K->12405K(125952K), 0.0308033 secs] [Times: user=0.00 sys=0.00, real=0.03 secs]
[GC (Allocation Failure) [PSYoungGen: 38390K->5110K(71680K)] 45685K->25151K(159232K), 0.0125724 secs] [Times: user=0.00 sys=0.05, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 71670K->5098K(71680K)] 91711K->46761K(159232K), 0.0264458 secs] [Times: user=0.00 sys=0.02, real=0.03 secs]
[GC (Allocation Failure) [PSYoungGen: 71658K->5118K(138240K)] 113321K->69852K(225792K), 0.0284353 secs] [Times: user=0.03 sys=0.01, real=0.03 secs]
[Full GC (Ergonomics) [PSYoungGen: 5118K->0K(138240K)] [ParOldGen: 64733K->68485K(139264K)] 69852K->68485K(277504K), [Metaspace: 2618K->2618K(1056768K)], 0.0544842 secs] [Times: user=0.08 sys=0.00, real=0.06 secs]
[GC (Allocation Failure) [PSYoungGen: 133120K->5112K(138240K)] 201605K->112621K(277504K), 0.0234047 secs] [Times: user=0.00 sys=0.03, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 5112K->0K(138240K)] [ParOldGen: 107509K->104481K(205824K)] 112621K->104481K(344064K), [Metaspace: 2618K->2618K(1056768K)], 0.0544583 secs] [Times: user=0.08 sys=0.00, real=0.06 secs]
[GC (Allocation Failure) [PSYoungGen: 133120K->44395K(258048K)] 237601K->148876K(463872K), 0.0519741 secs] [Times: user=0.00 sys=0.03, real=0.05 secs]
[GC (Allocation Failure) [PSYoungGen: 257899K->54270K(269312K)] 362380K->207905K(475136K), 0.0478011 secs] [Times: user=0.08 sys=0.05, real=0.05 secs]
[GC (Allocation Failure) [PSYoungGen: 269310K->88561K(401408K)] 422945K->268708K(607232K), 0.0472845 secs] [Times: user=0.05 sys=0.03, real=0.05 secs]
[Full GC (Ergonomics) [PSYoungGen: 88561K->9704K(401408K)] [ParOldGen: 180146K->205551K(328704K)] 268708K->215255K(730112K), [Metaspace: 2618K->2618K(1056768K)], 0.0885924 secs] [Times: user=0.11 sys=0.03, real=0.09 secs]
执行结束!共生成对象次数:3481
Heap
 PSYoungGen      total 401408K, used 22444K [0x00000000d5f00000, 0x00000000f9400000, 0x0000000100000000)
  eden space 312832K, 4% used [0x00000000d5f00000,0x00000000d6b710e8,0x00000000e9080000)
  from space 88576K, 10% used [0x00000000f0180000,0x00000000f0afa090,0x00000000f5800000)
  to   space 115712K, 0% used [0x00000000e9080000,0x00000000e9080000,0x00000000f0180000)
 ParOldGen       total 328704K, used 205551K [0x0000000081c00000, 0x0000000095d00000, 0x00000000d5f00000)
  object space 328704K, 62% used [0x0000000081c00000,0x000000008e4bbd18,0x0000000095d00000)
 Metaspace       used 2624K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 290K, capacity 386K, committed 512K, reserved 1048576K


java -Xloggc:gc.demo.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
执行结束!共生成对象次数:8602
解析见 gc.demo.log 文件

模拟OOM 堆内存设置为128M，出现了OOM，溢出之前MinorGC，一直出现Full GC
java -Xmx128m -XX:+PrintGCDetails GCLogAnalysis
正在执行...
[GC (Allocation Failure) [PSYoungGen: 33280K->5117K(38400K)] 33280K->13056K(125952K), 0.0065417 secs] [Times: user=0.00 sys=0.06, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 38241K->5110K(38400K)] 46180K->20590K(125952K), 0.0064208 secs] [Times: user=0.05 sys=0.02, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 38333K->5114K(38400K)] 53814K->29182K(125952K), 0.0078619 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 38242K->5110K(38400K)] 62310K->37969K(125952K), 0.0073389 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 38240K->5100K(38400K)] 71099K->46661K(125952K), 0.0089218 secs] [Times: user=0.06 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 38126K->5104K(19968K)] 79687K->58356K(107520K), 0.0082509 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 19781K->8112K(29184K)] 73033K->62567K(116736K), 0.0053826 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
[GC (Allocation Failure) [PSYoungGen: 22960K->13938K(29184K)] 77415K->69729K(116736K), 0.0039781 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
[GC (Allocation Failure) [PSYoungGen: 28510K->14320K(29184K)] 84302K->74290K(116736K), 0.0094010 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 29154K->9065K(29184K)] 89124K->78119K(116736K), 0.0097556 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [PSYoungGen: 23913K->6247K(29184K)] 92967K->83906K(116736K), 0.0088884 secs] [Times: user=0.02 sys=0.03, real=0.01 secs]
[Full GC (Ergonomics) [PSYoungGen: 6247K->0K(29184K)] [ParOldGen: 77658K->77967K(87552K)] 83906K->77967K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0236191 secs] [Times: user=0.05 sys=0.03, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14696K->0K(29184K)] [ParOldGen: 77967K->78511K(87552K)] 92664K->78511K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0235650 secs] [Times: user=0.05 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14710K->0K(29184K)] [ParOldGen: 78511K->82845K(87552K)] 93222K->82845K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0290280 secs] [Times: user=0.08 sys=0.00, real=0.03 secs]
[Full GC (Ergonomics) [PSYoungGen: 14742K->837K(29184K)] [ParOldGen: 82845K->87410K(87552K)] 97587K->88248K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0244580 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14842K->5110K(29184K)] [ParOldGen: 87410K->87516K(87552K)] 102253K->92627K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0199262 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14848K->7009K(29184K)] [ParOldGen: 87516K->87189K(87552K)] 102364K->94199K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0151753 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14713K->8008K(29184K)] [ParOldGen: 87189K->87097K(87552K)] 101902K->95105K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0285304 secs] [Times: user=0.05 sys=0.00, real=0.03 secs]
[Full GC (Ergonomics) [PSYoungGen: 14688K->9442K(29184K)] [ParOldGen: 87097K->87106K(87552K)] 101785K->96549K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0268016 secs] [Times: user=0.06 sys=0.00, real=0.03 secs]
[Full GC (Ergonomics) [PSYoungGen: 14775K->10593K(29184K)] [ParOldGen: 87106K->87331K(87552K)] 101882K->97924K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0215017 secs] [Times: user=0.05 sys=0.01, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14554K->10974K(29184K)] [ParOldGen: 87331K->86887K(87552K)] 101885K->97862K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0337991 secs] [Times: user=0.08 sys=0.00, real=0.03 secs]
[Full GC (Ergonomics) [PSYoungGen: 14729K->12608K(29184K)] [ParOldGen: 86887K->86840K(87552K)] 101617K->99449K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0244978 secs] [Times: user=0.06 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14664K->11972K(29184K)] [ParOldGen: 86840K->87491K(87552K)] 101504K->99463K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0177229 secs] [Times: user=0.05 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14725K->13686K(29184K)] [ParOldGen: 87491K->87420K(87552K)] 102216K->101107K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0099974 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[Full GC (Ergonomics) [PSYoungGen: 14429K->13704K(29184K)] [ParOldGen: 87420K->87411K(87552K)] 101850K->101115K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0228560 secs] [Times: user=0.06 sys=0.00, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14789K->14649K(29184K)] [ParOldGen: 87411K->87097K(87552K)] 102200K->101746K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0170948 secs] [Times: user=0.05 sys=0.02, real=0.02 secs]
[Full GC (Ergonomics) [PSYoungGen: 14848K->14830K(29184K)] [ParOldGen: 87097K->87097K(87552K)] 101945K->101928K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0066231 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[Full GC (Ergonomics) [PSYoungGen: 14830K->14544K(29184K)] [ParOldGen: 87446K->87352K(87552K)] 102277K->101896K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0207145 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]
[Full GC (Allocation Failure) [PSYoungGen: 14544K->14544K(29184K)] [ParOldGen: 87352K->87332K(87552K)] 101896K->101877K(116736K), [Metaspace: 2618K->2618K(1056768K)], 0.0247079 secs] [Times: user=0.06 sys=0.00, real=0.03 secs]
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
        at GCLogAnalysis.generateGarbage(GCLogAnalysis.java:42)
        at GCLogAnalysis.main(GCLogAnalysis.java:25)
Heap
 PSYoungGen      total 29184K, used 14848K [0x00000000fd580000, 0x0000000100000000, 0x0000000100000000)
  eden space 14848K, 100% used [0x00000000fd580000,0x00000000fe400000,0x00000000fe400000)
  from space 14336K, 0% used [0x00000000fe400000,0x00000000fe400000,0x00000000ff200000)
  to   space 14336K, 0% used [0x00000000ff200000,0x00000000ff200000,0x0000000100000000)
 ParOldGen       total 87552K, used 87332K [0x00000000f8000000, 0x00000000fd580000, 0x00000000fd580000)
  object space 87552K, 99% used [0x00000000f8000000,0x00000000fd5493e8,0x00000000fd580000)
 Metaspace       used 2648K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 293K, capacity 386K, committed 512K, reserved 1048576K

内存配置的特别小 GC频率高
随着内存越来越大，GC次数变少 FUll GC次数变少，生成的对象个数变多，程序效率得到提升，降低OOM发生的概率；
Full GC Young和Old区都发生了变化，Meta区没有变化
Minor GC 指Young区，Major指Old区GC
以上两组不会区分的特别清晰，可能是一样的， Old区时间长的原因吧

接下来具体看不同的GC下的表现
1、串行化GC
java -XX:+UseSerialGC -Xms512m -Xmx512m -Xloggc:gc.serial.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
执行结束!共生成对象次数:7843
gc.serial.log

改为2G
java -XX:+UseSerialGC -Xms2g -Xmx2g -Xloggc:gc.serial.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
执行结束!共生成对象次数:8116

Minor GC 把Eden区和存活区S0的对象复制到S1，有部分对象晋升到老年代
Full GC 把老年代回收掉

模拟Full GC
java -XX:+UseSerialGC -Xms128m -Xmx128m -Xloggc:gc.serial.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
Full GC只有老年代在处理，而且有些Full GC老年代没有变，什么活都没有干成 还是那个内存 GC无效
JVM进程干掉了，一直在Full GC，跟崩了没区别
串行化GC能不用就不用

2、并行GC
java -XX:+UseParallelGC -Xms512m -Xmx512m -Xloggc:gc.parallel.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
执行结束!共生成对象次数:5619

暂停的时间变短了，Young区
最后一次YoungGC 88%--->18%
最后一次FullGC Young变为0，Old区 91%--->66% 减少了25的数据
这些情况基本符合分代假设，Young区在一次GC大部分可以干掉。FullGC一般情况下存放的正在使用、已使用还要用的
例子跟业务系统有区别，在创建时就没有了 业务系统干掉的Full GC并不多

java -XX:+UseParallelGC -Xms2g -Xmx2g -Xloggc:gc.parallel.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
没有Full GC了

变为128M时也是一直Full GC

年轻代GC的时候，只清理Young区，Old区不清理，存活对象到S1区，Eden和S0全部清空；老年代增加
Full GC 清除Young干到0，并清理Old区

引用跟踪，没有人记住他，就会被回收

如果不配置Xms会怎么样？
java -XX:+UseParallelGC -Xmx512m -Xloggc:gc.parallel.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
第一次GC发生的内存比较小，所以第一次发生的时间会提前

3、CMS
java -XX:+UseConcMarkSweepGC -Xms512m -Xmx512m -Xloggc:gc.cms.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
执行结束!共生成对象次数:8480
GC情况变复杂了
发生了多次Young GC 有多个步骤
初始标记 STW阶段，时间很短，1毫秒，因为只标记了根对象的第一个对象，即每个队的排头
并发标记
并发预清理
最终标记
并发清除
并发重置
默认情况下，在做并发GC处理的时候，GC线程数占CPU核心数的四分之一
默认CMS GC后不进行内存整理清理，但有参数可以调，FullGC后做一次清理，减少内存碎片

xms xmx都配置为4g
java -XX:+UseConcMarkSweepGC -Xms4g -Xmx4g -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
2021-12-15T13:05:14.371+0800: [GC (Allocation Failure) 2021-12-15T13:05:14.371+0800: [ParNew: 272640K->34048K(306688K), 0.0316200 secs] 272640K->84680K(4160256K), 0.0327151 secs] [Times: user=0.08 sys=0.05, real=0.03 secs]
2021-12-15T13:05:14.459+0800: [GC (Allocation Failure) 2021-12-15T13:05:14.459+0800: [ParNew: 306688K->34048K(306688K), 0.0408347 secs] 357320K->162308K(4160256K), 0.0412289 secs] [Times: user=0.13 sys=0.03, real=0.04 secs]
2021-12-15T13:05:14.563+0800: [GC (Allocation Failure) 2021-12-15T13:05:14.563+0800: [ParNew: 306592K->34048K(306688K), 0.0598961 secs] 434853K->241879K(4160256K), 0.0604376 secs] [Times: user=0.22 sys=0.02, real=0.06 secs]
2021-12-15T13:05:14.690+0800: [GC (Allocation Failure) 2021-12-15T13:05:14.690+0800: [ParNew: 306688K->34048K(306688K), 0.0634232 secs] 514519K->320621K(4160256K), 0.0640135 secs] [Times: user=0.16 sys=0.03, real=0.06 secs]
2021-12-15T13:05:14.826+0800: [GC (Allocation Failure) 2021-12-15T13:05:14.827+0800: [ParNew: 306541K->34048K(306688K), 0.0639988 secs] 593115K->402088K(4160256K), 0.0646384 secs] [Times: user=0.17 sys=0.03, real=0.07 secs]
2021-12-15T13:05:14.955+0800: [GC (Allocation Failure) 2021-12-15T13:05:14.956+0800: [ParNew: 306688K->34048K(306688K), 0.0602681 secs] 674728K->477271K(4160256K), 0.0607463 secs] [Times: user=0.13 sys=0.05, real=0.06 secs]
2021-12-15T13:05:15.082+0800: [GC (Allocation Failure) 2021-12-15T13:05:15.082+0800: [ParNew: 306688K->34048K(306688K), 0.0656185 secs] 749911K->560944K(4160256K), 0.0660632 secs] [Times: user=0.17 sys=0.03, real=0.07 secs]
执行结束!共生成对象次数:8036
Heap
 par new generation   total 306688K, used 232932K [0x00000006c0000000, 0x00000006d4cc0000, 0x00000006d4cc0000)
  eden space 272640K,  72% used [0x00000006c0000000, 0x00000006cc239160, 0x00000006d0a40000)
  from space 34048K, 100% used [0x00000006d2b80000, 0x00000006d4cc0000, 0x00000006d4cc0000)
  to   space 34048K,   0% used [0x00000006d0a40000, 0x00000006d0a40000, 0x00000006d2b80000)
 concurrent mark-sweep generation total 3853568K, used 526896K [0x00000006d4cc0000, 0x00000007c0000000, 0x00000007c0000000)
 Metaspace       used 2624K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 290K, capacity 386K, committed 512K, reserved 1048576K
只发生了两次Young GC ，CMS的并发GC根本没有发生

4、G1 GC
java -XX:+UseG1GC -Xms512M -Xmx512M -Xloggc:gc.g1complex.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...  这个结果乱糟糟的
执行结束!共生成对象次数:8784

用这个命令
java -XX:+UseG1GC -Xms512M -Xmx512M -Xloggc:gc.g1.log -XX:+PrintGC -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
执行结束!共生成对象次数:8537
生成的结果比较清爽
不分代回收了

Evacuation Pause：young 纯年轻代模式转移暂停
Concurrent Marking 并发标记
阶段1 Initial Mark 初始标记
阶段2 Root Region Scan Root区扫描
阶段3 Concurrent Mark 并发标记
阶段4 Remark 再次标记
阶段5 Cleanup 清理
Evacuation Pause mixed 转移暂停：混合模式
Full GC Allocation Failure

java -XX:+UseG1GC -Xms4g -Xmx4g  -XX:+PrintGC -XX:+PrintGCDateStamps GCLogAnalysis
正在执行...
2021-12-15T19:54:36.772+0800: [GC pause (G1 Evacuation Pause) (young) 204M->65M(4096M), 0.0233262 secs]
2021-12-15T19:54:36.835+0800: [GC pause (G1 Evacuation Pause) (young) 243M->117M(4096M), 0.0231948 secs]
2021-12-15T19:54:36.896+0800: [GC pause (G1 Evacuation Pause) (young) 295M->172M(4096M), 0.0242244 secs]
2021-12-15T19:54:36.960+0800: [GC pause (G1 Evacuation Pause) (young) 350M->224M(4096M), 0.0239226 secs]
2021-12-15T19:54:37.021+0800: [GC pause (G1 Evacuation Pause) (young) 402M->279M(4096M), 0.0263141 secs]
2021-12-15T19:54:37.083+0800: [GC pause (G1 Evacuation Pause) (young) 457M->336M(4096M), 0.0318806 secs]
2021-12-15T19:54:37.151+0800: [GC pause (G1 Evacuation Pause) (young) 514M->394M(4096M), 0.0254680 secs]
2021-12-15T19:54:37.215+0800: [GC pause (G1 Evacuation Pause) (young) 572M->444M(4096M), 0.0242542 secs]
2021-12-15T19:54:37.274+0800: [GC pause (G1 Evacuation Pause) (young) 622M->501M(4096M), 0.0292854 secs]
2021-12-15T19:54:37.339+0800: [GC pause (G1 Evacuation Pause) (young) 685M->571M(4096M), 0.0303718 secs]
2021-12-15T19:54:37.415+0800: [GC pause (G1 Evacuation Pause) (young) 785M->645M(4096M), 0.0319682 secs]
2021-12-15T19:54:37.519+0800: [GC pause (G1 Evacuation Pause) (young) 925M->739M(4096M), 0.0417989 secs]
执行结束!共生成对象次数:8427
只有Young GC了


内存4G，大家效果是差不多的
当内存特别小的时候，效率都不高，内存不够用导致GC频繁 占用时间长，业务线程受到影响，创建对象数量比较低

学会分析GC日志信息，特点和使用的场景

jmap -heap pid 查看当前GC算法 jps -mlv

发现S0区不够大太小，也会放到Old区
默认对象到6还是7岁 进入老年代，也不一定非是这种情况，

随着内存增大，CMS暂停时间比并行更短，因为拆分了，对业务没有直接影响

Allocation Failure new一个对象失败，剩余的内存不够用，需要做GC

CMS一般不跟Young区的并行GC搭配  gc.png

Par New是改进版本的串行GC

Thread对象对应操作系统的线程，一直诟病
数量有效，用起来特别复杂
JVM内部对应一个OSThread对象，它会操作栈，栈对应着Young区给线程使用的TLAB 小的内存区域，线程自己的内存缓冲区
JVM线程有3个层面：代码 jdk的Thread，JVM内部对应的真实的物理线程OSThread，操作系统层面CPU核心数

热点代码 字节码--->机器码

安全点只有VM线程能执行，比如做GC，做完了，恢复掉

解决死锁：增加超时时间，把一个线程终止掉

jstack -l

int long 分别占 4 8字节
Integer Long 分别占16 16字节  8+4 8+8 8是对象头

Meta放的是类的定义，class对象基础的信息，DNA。 class对象在堆上

默认无穷大，大部分情况下元数据一直会增，还是需要设置上限，好在内存现在都很大
高版本情况下可以做类的卸载工作的，需要配置参数

元数据区内存溢出，反射类加载、动态代理生成的类加载  增加缓存或单例

xss 默认1M 如果占用空间不大，可以调整为512k 256k

线程池创建成本高，创建过多效率反而低
核心CPU 16,16个线程整好，利用率高。如果一百个线程，一个CPU来回切换，时间片更碎，效率更低
50M对象就是一个大对象

G1 超过region的一半512k算大对象  默认1M，2048region 2G内存，每个region1M  512k是大对象
如果一个对象600k 1M还剩余400，这400只能空着，造成内存碎片
更大的对象跨region

下面非常重要
==========================
JVM调优经验 懂了这么多大道理，还是不会用
1、分配速率
单位时间内创建的新对象占用的堆内存
99.9%在Young区 只影响Young区
肝脏更换细胞
A分配速率持续大，销毁回收的少，这个人就完了 晚期OOM
B分配速率大，回收速率大，免疫强大  亚健康 全身各种能量调动起来对付老细胞 GC速度快，分配快，但是系统不行 GC干了很多活，占用CPU资源，
业务系统占用的少，抢占了资源

2、过早提升 提升速率
查一个非常大的list，Full频率高，CPU利用率低， 可以批量查询或者增加堆内存，效果会更好，GC处理量小一些
让临时数据能够在年轻代放得下，不要让FullGC每次一下子到10%使用率这么低不行，防止过早提升
还没到Old被YoungGC干掉，这样吞吐比较平稳，延迟低
==========================
Arthas

数据库连接池一般20-50最合适，配置几百还没有2 30好
log加buffer 避免影响业务 log轮换Rooling

显示的去配置参数更可控
默认值有风险，沟通也是如此
02:53 技术3

堆外内存默认最大值和xmx一样 给NIO使用的框架多些buffer
可以通过-XX:MaxDirectMemorySize来指定最大的堆外内存大小

跟GC相关的JVM参数 600多个

JVM高并发下的一个例子
========================================================
java -jar -Xmx1g -Xms1g ...jar
sb -u http.... -c 20 -N 60 压测1分钟，自动弹出HTML页面
结果：
sb -u http://localhost:8088/api/hello -c 2 -N 60
Starting at 2021/12/20 11:39:13
[Press C to stop the test]
135176  (RPS: 2043)
---------------Finished!----------------
Finished at 2021/12/20 11:40:19 (took 00:01:06.3730527)
Status 200:    135176

RPS: 2207.4 (requests/second)
Max: 272ms
Min: 0ms
Avg: 0.1ms
平均吞吐量 2207，延迟最高272，最低是0

jps -mlv
jps -mlv
8648 sun.tools.jps.Jps -mlv -Dapplication.home=D:\jdk8 -Xms8m
13660 gateway-server-0.0.1-SNAPSHOT.jar -Xms1g -Xmx1g

jvisualvm 会弹出该应用，监视，只看内存，然后压一下
sb -u http://localhost:8088/api/hello -c 2 -N 60
一分钟内出现了多个GC，锯齿状

jmc 启用飞行记录，然后压测，记录能保存下来，会影响线下运行  飞行记录可以存为文件，随时用jmc打开 别人可以分析

压测到CPU资源没了 得到极限

配置不同的启动参数观察吞吐量 512M 1G，512M GC频率会增加

RPS吞吐量  每秒处理的请求数 等效于QPS 每秒查询数
一般情况下，延迟越低，单位时间内干的活越多，吞吐量高。
二般情况下，延迟高，吞吐量也很高，没有线性关系 因为有很多等待


Mac用wrk工具
========================================================
并行GC
CMS
小的堆内存512M CMS更好，大的堆内存下，吞吐量并行更大
并行GC 针对高吞吐量的，每次延迟比较高；
CMS 每次延迟低，在GC下消耗的整体成本比较高，吞吐量没有并行GC高；前提内存大点；内存小另说

吞吐量并行gc高
G1吞吐量也要比并行低
所以低版本采用并行GC作为默认的，是很有价值的

默认堆大小 四分之一