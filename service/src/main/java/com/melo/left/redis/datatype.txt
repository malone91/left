string SDS 简单动态字符串 free, len, char[] 结尾\0，可以重用c原生函数
list 双向链表、压缩列表
hash 压缩列表、哈希表git pull

sorted set 压缩列表、跳表
set 哈希表、整数数组


SDS:获取长度常数复杂度，杜绝缓冲区溢出（自动扩容）
C字符串底层N+1个字符长的数组  \0
减少内存分配次数，空间预分配，惰性空间释放两种优化策略
1、字符串增长
小于1M则len=free，总计：free + len + 1；
大于1M，分配1M的free，总计：free + 1M + 1byte
分配次数从必须N次变为最多N次
减少连续执行字符串增长操作所需的内存重新分配次数
2、字符串缩短
程序并不立即使用内存重新分配来回收缩短后多出来的字节，使用free将字节数量记录起来
将来使用 有需要时真正释放SDS未使用空间

二进制安全
C字符串里不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾，
这些限制只能让C字符串保存文本数据。二进制数据无法保存

所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据
buff为字节数组，Redis不用这个保存字符，而是保存一系列二进制数据
SDS使用len属性来判断字符串是否结束

SDS不仅保存文本数据，还能保存任意格式的二进制数据

SDS中buf数组多出\0是为了重用c函数 重用<string.h>
strcasecmp(sds->buf, "hello world");
将SDS保存的字符串追加到一个C字符串的后面
strcat(c_string, sds->buf);
以上遵循c字符串以空字符结尾的惯例，可以重用<string.h>函数，避免不必要的代码重复

