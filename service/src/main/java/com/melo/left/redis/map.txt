字典在Redis的应用场景：
Redis的数据库，对数据库的增删改查构建在对字典的操作之上的
哈希键,当一个哈希键包含的键值对比较多，或者键值对中的元素比较长的字符串时，Redis使用字典作为
哈希键的底层实现

set msg aaa:  该键值对就是保存在代表数据库的字典里面的

hlen website -> 10086
hgetall website

Redis的字段使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，
每个哈希表节点保存了字典中的一个键值对

字典由哈希表作为底层实现
哈希表结构
typedef struct dictht {
    dictEntry **table;//哈希表数组
    unsigned long size;//哈希表大小
    unsigned long sizemask;//哈希表大小掩码，用于计算索引值，总是等于size-1
    //和哈希值一起决定一个键应该被放到table数组的哪个索引上面
    unsigned long used;//哈希表已有节点的数量
} dictht

哈希表节点
typedef struct dictEntry {
    void *key;
    union {//值 键值对的值可以是一个指针，或者是两种整数
        void *val;
        uint64_t u64;
        int64_t s64;
    } v;
    struct dictEntry *next;//指向下个哈希表节点，形成链表，解决哈希值相同的冲突问题
    //连接在一起的两个key
} dictEntry;

字典结构：
typedef struct dict {
    dictType *type;//类型特定函数
    void *privatedata;//私有数据
    dictht ht[2];//哈希表
    int trehashidx;//rehash索引，当rehash不在进行时，值为-1
} dict;

type和privatedata是针对不同类型的键值对，为创建多态字典而设置的
ht属性是包含两个项的数组，每一个项都是dictht哈希表，一般情况下只使用ht[0],
对ht[0]进行rehash的时候使用ht[1]
rehashinx记录了目前rehash的进度，没有进行rehash为-1

当要将一个新的键值对添加到字典里面时，程序需要先根据键计算出哈希值和索引值
根据索引值将包含新键值对的哈希表节点放到哈希表数组的指定索引上面
hash = dict -> type -> hashFunction(key)
index = hash & dict -> ht[x].sizemask   x: 0, 1
eg：k得到哈希值38，&上sizemask3  -->得到索引0